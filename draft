<!doctype html>
<html>
<head>
	<meta charset="utf-8">
	<meta name=viewport content="width=device-width, initial-scale=1">
	<!-- made with love by Curtis Fenner -->
	<title>Bismuth / CurtisFenner</title>
	<link rel="stylesheet" href="../style.css">
</head>
<body>
	<div id="codeblocks"></div>
	<header>
		<nav>
			<h1><a href="/">CurtisFenner</a></h1>
			<ul class="small">
				<li><a href="http://github.com/curtisfenner">GitHub</a>
				<li>
					<a href="http://www.google.com/recaptcha/mailhide/d?k=018CuaWnTFBB6frcYDLBdu1g==&amp;c=s0oYZ8B6zNjjWgDYqmrUGa0P1yLrsShQ8nCB-TzAbEk=" onclick="window.open('http://www.google.com/recaptcha/mailhide/d?k\075018CuaWnTFBB6frcYDLBdu1g\75\75\46c\75s0oYZ8B6zNjjWgDYqmrUGa0P1yLrsShQ8nCB-TzAbEk\075', '', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300'); return false;" title="Reveal this e-mail address">
						Email Me
					</a>
			</ul>
		</nav>
	</header>
	<!-- HEADER END -->
	<section>
		<h1>Bismuth</h1>
		<p>Bismuth is a semi-functional statically-typed programming language.
		<p>The goal of Bismuth is to be an imperative language that uses the
			advantages of functional purity and strong types to make writing
			and testing correct code easier.
	</section>

	<section>
		<h2>Effects and Actions</h2>
		<p>The most interesting aspect of Bismuth is its <em>effects</em>
			system. Effects accomplish two things:
		<ul>
			<li>Dependency injection of services
			<li>Side-effects (and IO)
		</ul>
		<p>Bismuth is imperative; however, there is no pass-by-reference, no
			global variables, and closures may only read outside variables.
		<p>Functions in Bismuth are pure-by-default. Functions can break this
			purity by stating <em>effects</em>.
		<pre class="draft">
effect Log {
	func log (line:str) -> Unit,
}
</pre>
		<p>An effect is a set of <em>actions</em> that, when invoked, may have
			side-effects.
		<p>A <em>service</em> provides handlers for these effects:
		<pre class="draft">
service LogList impl Log {
	var q : Queue String = empty;
	func log (thing : String) -> Unit {
		push @q thing;
	}
}
</pre>
		<p>Effect actions are always invoked using a bang:
		<pre>
log "Hello" !
</pre>
		<p>Program input/output is implemented as effects. The handlers for
			these effects are implemented in a foreign environment; the <code>
			main</code> function declares the <code>IO</code> effect which gives
			it access to these.
		<p>Uses for effects:
		<ul>
			<li>logging
			<li>input / output
			<li>easily mockable services
			<li>PRNGs
			<li>clear cryptographic primitives
		</ul>
	</section>

	<section>
		<h2>Traits</h2>
		<p>Traits are similar to interfaces in Java or traits in Rust.
		<p>Traits can associate a type with several other types. Trais define
			valid functions that can be performed on this object.
	</section>

	<section>
		<h2>Operators</h2>
		<p>Bismuth will support custom operators. Operators may not use the
			period, comma, parenthesis, or braces.
		<p>Operators are aliases for some trait function, combined with their
			precedence (compared to other operators in a partial ordering) and
			associativity (left, right, neither).
		<p>Functions can also be turn into (non-associative) operators by
			surrounding their name in backticks: <code>5 `add` 3</code> is the
			same as <code>add(5, 3)</code>.
		<p>Operators cannot be partially applied, or turned into functions.
			However, there is always an equivalent name in a trait for the
			operator.
	</section>

	<section>
		<h2>Calling Functions</h2>
		<p>The standard C-style function call syntax is easily skimmed and
			immediately unambiguous, so Bismuth supports that:
		<pre>
foo(bar, quux(3))
</pre>
		<p>The Haskell / Ruby / Perl style of dropping parentheses can reduce
			the noise of unnecessary parentheses. Further, it allows <em>partial
			application</em>. For example, if you have the function
			<code>add(x, y)</code>, then <code>add(5)</code> is a function that
			adds five to its input.
		<p>Bismuth allows partial application, too:
		<pre>
foo bar (quux 3)
</pre>
	</section>
	<!-- FOOTER BEGIN -->
	<footer>
		&copy; 2016 Curtis Fenner
	</footer>
	<script src="/code.js"></script>
</body>